import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN', "8390604966:AAE39zuCSl9vfUjPZERJ2ncR8mTBrXr9rBU")

# –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
DRINKS_DATABASE = {
    "–ö–æ—Ñ–µ": {
        "–ê—Ñ–æ–≥–∞—Ç–æ": os.path.join(BASE_DIR, "tech_cards", "–ê—Ñ–æ–≥–∞—Ç–æ.PNG"),
        "–ö–∞–ø—É—á–∏–Ω–æ –í–∞—Ä–µ–Ω–∞—è —Å–≥—É—â–µ–Ω–∫–∞ —Å —Ö–∞–ª–≤–æ–π": os.path.join(BASE_DIR, "tech_cards", "–ö–∞–ø—É—á–∏–Ω–æ –í–∞—Ä–µ–Ω–∞—è —Å–≥—É—â–µ–Ω–∫–∞ —Å —Ö–∞–ª–≤–æ–π.PNG"),
    },
    "–•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏": {
        "–í—Ä–µ–º—è –ª–∞–π–º–∞": os.path.join(BASE_DIR, "tech_cards", "–í—Ä–µ–º—è –ª–∞–π–º–∞.PNG"),
        "–ì—É–∞–Ω–∞–±–∞–Ω–∞": os.path.join(BASE_DIR, "tech_cards", "–ì—É–∞–Ω–∞–±–∞–Ω–∞.PNG"),
        "–ö–∞—Ä–∏–±—Å–∫–∏–π –∞–Ω–∞–Ω–∞—Å": os.path.join(BASE_DIR, "tech_cards", "–ö–∞—Ä–∏–±—Å–∫–∏–π –∞–Ω–∞–Ω–∞—Å.PNG"),
        "–õ–∏—á–∏-–¥—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç": os.path.join(BASE_DIR, "tech_cards", "–õ–∏—á–∏-–¥—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç.PNG"),
    }
}

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
application = None

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    categories = list(DRINKS_DATABASE.keys())
    
    keyboard = []
    for i in range(0, len(categories), 2):
        row = []
        if i < len(categories):
            row.append(KeyboardButton(categories[i]))
        if i + 1 < len(categories):
            row.append(KeyboardButton(categories[i + 1]))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton("üìã –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏")])
    
    return ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤ üëá"
    )

def create_category_keyboard(category):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    drinks = list(DRINKS_DATABASE[category].keys())
    
    keyboard = []
    for i in range(0, len(drinks), 2):
        row = []
        if i < len(drinks):
            row.append(KeyboardButton(drinks[i]))
        if i + 1 < len(drinks):
            row.append(KeyboardButton(drinks[i + 1]))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ üëá"
    )

def create_all_drinks_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –Ω–∞–ø–∏—Ç–∫–∞–º–∏"""
    all_drinks = []
    for category in DRINKS_DATABASE:
        all_drinks.extend(DRINKS_DATABASE[category].keys())
    
    keyboard = []
    for i in range(0, len(all_drinks), 2):
        row = []
        if i < len(all_drinks):
            row.append(KeyboardButton(all_drinks[i]))
        if i + 1 < len(all_drinks):
            row.append(KeyboardButton(all_drinks[i + 1]))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ üëá"
    )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Ö–∫–∞—Ä—Ç –Ω–∞–ø–∏—Ç–∫–æ–≤.

üè∑Ô∏è **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤
2. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞–ø–∏—Ç–∫–∞
3. –ü–æ–ª—É—á–∏ —Ç–µ—Ö–∫–∞—Ä—Ç—É!

‚ú® –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –≤—Ä—É—á–Ω—É—é.

üìä **–í—Å–µ–≥–æ –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ –±–∞–∑–µ:** {total_drinks}
""".format(total_drinks=sum(len(drinks) for drinks in DRINKS_DATABASE.values()))
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=create_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_message = update.message.text.strip()
    
    print(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_message}'")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if user_message == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_main_keyboard()
        )
        return
        
    elif user_message == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤:",
            reply_markup=create_main_keyboard()
        )
        return
        
    elif user_message == "üìã –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏":
        all_drinks_count = sum(len(drinks) for drinks in DRINKS_DATABASE.values())
        await update.message.reply_text(
            f"üçπ –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ ({all_drinks_count}):",
            reply_markup=create_all_drinks_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if user_message in DRINKS_DATABASE:
        drinks_count = len(DRINKS_DATABASE[user_message])
        await update.message.reply_text(
            f"üçπ {user_message} ({drinks_count} –Ω–∞–ø–∏—Ç–∫–æ–≤):",
            reply_markup=create_category_keyboard(user_message)
        )
        return
    
    # –ò—â–µ–º –Ω–∞–ø–∏—Ç–æ–∫ –≤ –±–∞–∑–µ (–ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
    found_drink = None
    found_category = None
    
    for category, drinks in DRINKS_DATABASE.items():
        for drink in drinks:
            if user_message.lower() == drink.lower():
                found_drink = drink
                found_category = category
                break
        if found_drink:
            break
    
    if found_drink:
        file_path = DRINKS_DATABASE[found_category][found_drink]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫: {found_drink} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {found_category}")
        
        if os.path.exists(file_path):
            try:
                with open(file_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=f"üìã {found_drink}\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {found_category}"
                    )
                print(f"‚úÖ –¢–µ—Ö–∫–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è: {found_drink}")
                
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫:",
                    reply_markup=create_main_keyboard()
                )
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã: {str(e)}"
                print(error_msg)
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=create_main_keyboard()
                )
        else:
            error_msg = f"‚ùå –§–∞–π–ª —Ç–µ—Ö–∫–∞—Ä—Ç—ã –¥–ª—è '{found_drink}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(error_msg)
            
            await update.message.reply_text(
                f"‚ùå –¢–µ—Ö–∫–∞—Ä—Ç–∞ –¥–ª—è '{found_drink}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=create_main_keyboard()
            )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–∞–ø–∏—Ç–æ–∫ '{user_message}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤ –Ω–∏–∂–µ üëá",
            reply_markup=create_main_keyboard()
        )

async def show_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_keyboard()
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")

@app.route('/')
def home():
    return "ü§ñ –¢–µ—Ö–∫–∞—Ä—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞."

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    if application:
        update = Update.de_json(request.get_json(), application.bot)
        application.process_update(update)
    return 'ok'

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    global application
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞...")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {BASE_DIR}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    total_drinks = 0
    for category, drinks in DRINKS_DATABASE.items():
        drink_count = len(drinks)
        total_drinks += drink_count
        print(f"  üè∑Ô∏è {category}: {drink_count} –Ω–∞–ø–∏—Ç–∫–æ–≤")
        for drink in drinks:
            file_exists = "‚úÖ" if os.path.exists(DRINKS_DATABASE[category][drink]) else "‚ùå"
            print(f"    {file_exists} {drink}")
    
    print(f"üçπ –í—Å–µ–≥–æ –Ω–∞–ø–∏—Ç–∫–æ–≤: {total_drinks}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", show_menu_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    render_url = os.environ.get('RENDER_EXTERNAL_URL')
    if render_url:
        print(f"üåê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è: {render_url}")
        webhook_url = f"{render_url}/webhook"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        application.bot.set_webhook(
            url=webhook_url,
            secret_token='WEBHOOK_SECRET'
        )
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        print("‚ùå RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    setup_bot()
    
    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 10000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
