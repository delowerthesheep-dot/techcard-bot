import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8204345196:AAGa9ckArC5xUNSixAMtwTlY_NMGFYGnzDk')

# –ë–ê–ó–ê –ù–ê–ü–ò–¢–ö–û–í - Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

DRINKS_DATABASE = {
    "–ê—Ñ–æ–≥–∞—Ç–æ": os.path.join(BASE_DIR, "tech_cards", "–ê—Ñ–æ–≥–∞—Ç–æ.PNG"),
    "–í—Ä–µ–º—è –ª–∞–π–º–∞": os.path.join(BASE_DIR, "tech_cards", "–í—Ä–µ–º—è –ª–∞–π–º–∞.PNG"),
    "–ì—É–∞–Ω–∞–±–∞–Ω–∞": os.path.join(BASE_DIR, "tech_cards", "–ì—É–∞–Ω–∞–±–∞–Ω–∞.PNG"),
    "–ö–∞–ø—É—á–∏–Ω–æ –í–∞—Ä–µ–Ω–∞—è —Å–≥—É—â–µ–Ω–∫–∞ —Å —Ö–∞–ª–≤–æ–π": os.path.join(BASE_DIR, "tech_cards", "–ö–∞–ø—É—á–∏–Ω–æ –í–∞—Ä–µ–Ω–∞—è —Å–≥—É—â–µ–Ω–∫–∞ —Å —Ö–∞–ª–≤–æ–π.PNG"),
    "–ö–∞—Ä–∏–±—Å–∫–∏–π –∞–Ω–∞–Ω–∞—Å": os.path.join(BASE_DIR, "tech_cards", "–ö–∞—Ä–∏–±—Å–∫–∏–π –∞–Ω–∞–Ω–∞—Å.PNG"),
    "–õ–∏—á–∏-–¥—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç": os.path.join(BASE_DIR, "tech_cards", "–õ–∏—á–∏-–¥—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç.PNG"),
}

def create_drinks_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    drinks = list(DRINKS_DATABASE.keys())
    
    keyboard = []
    for i in range(0, len(drinks), 2):
        row = []
        if i < len(drinks):
            row.append(KeyboardButton(drinks[i]))
        if i + 1 < len(drinks):
            row.append(KeyboardButton(drinks[i + 1]))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏")])
    
    return ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Ö–∫–∞—Ä—Ç –Ω–∞–ø–∏—Ç–∫–æ–≤.

üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞–ø–∏—Ç–∫–∞ –Ω–∏–∂–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ç–µ—Ö–∫–∞—Ä—Ç—É.

‚ú® –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –≤—Ä—É—á–Ω—É—é.
"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=create_drinks_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_message = update.message.text.strip()
    
    print(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_message}'")
    
    if user_message == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏":
        available_drinks = "\n".join([f"‚Ä¢ {drink}" for drink in DRINKS_DATABASE.keys()])
        await update.message.reply_text(
            f"üçπ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏:\n\n{available_drinks}\n\n"
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞–ø–∏—Ç–∫–∞ üëÜ"
        )
        return
    
    found_drink = None
    for drink in DRINKS_DATABASE:
        if user_message.lower() == drink.lower():
            found_drink = drink
            break
    
    if found_drink:
        file_path = DRINKS_DATABASE[found_drink]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞–ø–∏—Ç–æ–∫: {found_drink}")
        print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
        print(f"üìÇ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(file_path)}")
        
        if os.path.exists(file_path):
            try:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
                with open(file_path, 'rb') as photo_file:
                    photo_data = photo_file.read()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                await update.message.reply_photo(
                    photo=photo_data,
                    caption=f"üìã –¢–µ—Ö–∫–∞—Ä—Ç–∞: {found_drink}"
                )
                print(f"‚úÖ –¢–µ—Ö–∫–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è: {found_drink}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫:",
                    reply_markup=create_drinks_keyboard()
                )
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}"
                print(error_msg)
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                    reply_markup=create_drinks_keyboard()
                )
        else:
            # –ü–æ–∫–∞–∂–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            tech_cards_path = os.path.join(BASE_DIR, "tech_cards")
            if os.path.exists(tech_cards_path):
                files = os.listdir(tech_cards_path)
                print(f"üìÇ –§–∞–π–ª—ã –≤ tech_cards: {files}")
            
            error_msg = f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            print(error_msg)
            await update.message.reply_text(
                f"‚ùå –¢–µ—Ö–∫–∞—Ä—Ç–∞ –¥–ª—è '{found_drink}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=create_drinks_keyboard()
            )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–∞–ø–∏—Ç–æ–∫ '{user_message}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞–ø–∏—Ç–∫–∞ –Ω–∏–∂–µ üëá",
            reply_markup=create_drinks_keyboard()
        )

async def show_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫"""
    await update.message.reply_text(
        "üçπ –í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:",
        reply_markup=create_drinks_keyboard()
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {BASE_DIR}")
    print("üìä –ù–∞–ø–∏—Ç–∫–∏ –≤ –±–∞–∑–µ:", list(DRINKS_DATABASE.keys()))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Ö–∫–∞—Ä—Ç:")
    for drink, path in DRINKS_DATABASE.items():
        exists = "‚úÖ" if os.path.exists(path) else "‚ùå"
        print(f"  {exists} {drink}: {os.path.basename(path)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É tech_cards
    tech_cards_path = os.path.join(BASE_DIR, "tech_cards")
    if os.path.exists(tech_cards_path):
        files = os.listdir(tech_cards_path)
        print(f"üìÇ –§–∞–π–ª—ã –≤ tech_cards: {files}")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ tech_cards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", show_menu_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –Ω–∞ Railway!")
    print("‚èπÔ∏è  –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ")
    application.run_polling()

if __name__ == "__main__":
    main()
